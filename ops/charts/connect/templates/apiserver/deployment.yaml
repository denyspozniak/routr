apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-routr-apiserver
  namespace: {{ .Release.Namespace }}  
  labels:
    {{- include ".helm.labels" . | nindent 4 }}
    service: apiserver
spec:
  selector:
    matchLabels:
      {{- include ".helm.selectorLabels" . | nindent 6 }}
      service: apiserver
  template:
    metadata:
      annotations: 
      {{- with .Values.apiserver.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include ".helm.selectorLabels" . | nindent 8 }}
        service: apiserver
    spec:
      securityContext:
        runAsUser: {{ .Values.apiserver.securityContext.runAsUser }}
        runAsGroup: {{ .Values.apiserver.securityContext.runAsGroup }}
        fsGroup: {{ .Values.apiserver.securityContext.fsGroup }}
      {{- if .Values.postgresql.enabled }}
      initContainers:
        - name: wait-for-database
          image: "{{ .Values.apiserver.migrations.image.repository }}:{{ .Values.apiserver.migrations.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.apiserver.migrations.image.pullPolicy }}
          resources:
            {{- if .Values.apiserver.migrations.resources.requests  }}
            requests:
            {{- .Values.apiserver.migrations.resources.requests | toYaml | nindent 14 }}
            {{- end }}
            {{- if .Values.apiserver.migrations.resources.limits }}
            limits:
            {{- .Values.apiserver.migrations.resources.limits | toYaml | nindent 14 }}
            {{- end }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              until pg_isready -h {{ .Release.Name }}-postgresql.{{ .Release.Namespace }} -p 5432 -U {{ .Values.postgresql.auth.username }} >/dev/null 2>&1; do
                echo "Waiting for the database..."
                sleep 2
              done
      {{- end }}
      containers:
        - name: apiserver
          image: "{{ .Values.apiserver.image.repository }}:{{ .Values.apiserver.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.apiserver.image.pullPolicy }}
          livenessProbe:
            grpc:
              port: 51907
            initialDelaySeconds: {{ .Values.apiserver.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.apiserver.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.apiserver.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.apiserver.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.apiserver.livenessProbe.timeoutSeconds }}
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-routr-database-url
          env:
            - name: LOGS_LEVEL
              value: {{ .Values.global.logsLevel }}
            - name: OTEL_EXPORTER_JAEGER_ENDPOINT
              value: {{ .Values.global.otlExporter }}
            - name: TLS_ON
              value: "{{ .Values.apiserver.tlsOn }}"
            - name: VERIFY_CLIENT_CERT
              value: "{{ .Values.apiserver.verifyClientCert }}"
            - name: CLOAK_ENCRYPTION_KEY
              value: "{{ .Values.apiserver.cloakEncryptionKey }}"
          ports:
            - containerPort: 51907
            # External port for the API server
            - containerPort: 51908
          resources:
            {{- if .Values.apiserver.resources.limits }}
            limits:
            {{- .Values.apiserver.resources.limits | toYaml | nindent 14 }}
            {{- end }}
            {{- if .Values.apiserver.resources.requests }}
            requests:
            {{- .Values.apiserver.resources.requests | toYaml | nindent 14 }}
            {{- end }}
          securityContext:
            allowPrivilegeEscalation: {{ .Values.apiserver.securityContext.allowPrivilegeEscalation }}
